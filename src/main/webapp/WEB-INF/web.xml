<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="jt-sso" version="2.5">
	<display-name>bjbj-sso</display-name>
	<!-- spring和SpringMVC的总结 
		配置方式:
		1.通过前端控制器直接扫描全部容器
		2.通过监听器的方式启动spring容器
		
		差别:
		第一种:
		如果springMVC和spring的配置文件都是通过前端控制器扫描则容器的启动是懒加载的.
		只有浏览器发出请求之后.前端控制器才会启动spring容器和springMVC容器.
		弊端:如果是大型项目用户如果访问时.这时后台的容器才会启动.这时用户等待的时间较长.
		耗费的时间主要在等待容器启动
		
		第二种:
		通过监听器的方式启动spring 当用户
	
	
	-->
	
	<!-- 配置监听器启动spring容器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!--  -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:/spring/applicationContext*.xml</param-value>
	</context-param>
	
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	<servlet>
		<servlet-name>DispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- 配置价值SpringMVC.xml -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:/spring/springmvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>DispatcherServlet</servlet-name>
		<!-- / 1.表示拦截全部的请求 2.拦截所有的静态资源文件 js/css/image 3.放行.jsp资源 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- 配置全站乱码解决 POST乱码 -->
	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<!-- 定义默认字符集utf-8 -->
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


</web-app>